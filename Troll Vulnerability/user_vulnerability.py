import networkx as nx
import csv
import collections
import operator


# In-degree centrality
def in_degree(G, edges):
    centr = dict()
    for edge in edges:
        centr.setdefault(edge[1], []).append(int(edge[2]))

    d = dict((key, sum(vals)) for key, vals in centr.items())
    return d


# Signed Eigenvector centrality
def signed_eigenvector(G, edges):
    se = nx.eigenvector_centrality(G)
    return se


# Freaks Centrality
def freaks(G, edges):
    freak = dict()

    for edge in edges:
        edge[2] = int(edge[2])
        if edge[2] == -1:
            freak.setdefault(edge[1], []).append(int(edge[2]))
        else:
            freak.setdefault(edge[1], []).append(0)

    fr = dict((key, sum(vals)) for key, vals in freak.items())
    return fr


# Modified Page-Rank Centrality
def modified_page_rank(G, edges):
    pos = nx.DiGraph()
    neg = nx.DiGraph()
    for edge in edges:
        edge[2] = int(edge[2])
        if (edge[2] == -1):
            neg.add_edge(edge[0], edge[1])
        else:
            pos.add_edge(edge[0], edge[1])

    pr_pos = nx.pagerank(pos)
    pr_neg = nx.pagerank(neg)

    modified_pr = dict()
    for node in pr_pos.keys():
        if (node in pr_neg.keys()):
            modified_pr[node] = pr_pos[node] - pr_neg[node]
        else:
            modified_pr[node] = pr_pos[node]

    for node in pr_neg.keys():
        if (node not in modified_pr.keys()):
            modified_pr[node] = pr_neg[node]

    return modified_pr


def breakGraph(G, edges, c):
    G_new = G

    benigns = dict((k, v) for k, v in c.items() if v >= 0)
    trolls = dict((k, v) for k, v in c.items() if v < 0)

    new_edges = []
    for troll in trolls:
        neighbors = G.neighbors(troll)

        for neighbor in neighbors:

            if (neighbor in trolls) and (G[troll][neighbor]['weight'] == 1 or G[troll][neighbor]['weight'] == -1):
                G_new.remove_edge(troll, neighbor)
            else:
                weight = G[troll][neighbor]['weight']
                new_edges.append([troll, neighbor, weight])


    centrality = modified_page_rank(G_new, new_edges)
    benigns = dict((k, v) for k, v in centrality.items() if v >= 0)
    trolls = dict((k, v) for k, v in centrality.items() if v < 0)

    for benign in benigns:
        neighbors = G.neighbors(benign)

        for neighbor in neighbors:

            if (neighbor in trolls) and G[benign][neighbor]['weight'] == 1:
                G_new.remove_edge(benign, neighbor)
            else:
                weight = G[benign][neighbor]['weight']
                new_edges.append([benign, neighbor, weight])

    centrality = modified_page_rank(G_new, new_edges)
    benigns = dict((k, v) for k, v in centrality.items() if v >= 0)
    trolls = dict((k, v) for k, v in centrality.items() if v < 0)

    print(len(benigns))
    print(len(trolls))
    return G_new, new_edges, benigns, trolls


def find_troll_neighbors(G, edges, benigns, trolls):
    troll_neighbors = dict()

    for edge in edges:
        edge[2] = int(edge[2])
        if edge[2] == -1:
            troll_neighbors.setdefault(edge[1], []).append(int(edge[2]))

    tn = dict((key, sum(vals)) for key, vals in troll_neighbors.items())
    sorted_tn = sorted(tn.items(), key=operator.itemgetter(1))
    print(sorted_tn)

if __name__ == '__main__':
    G = nx.DiGraph()
    with open("slash.csv", "r") as f:
        reader = csv.reader(f)
        edges = list(reader)

    for edge in edges:
        G.add_edge(edge[0], edge[1], weight=int(edge[2]))

    #centrality = freaks(G, edges)
    #centrality = in_degree(G, edges)
    centrality = modified_page_rank(G, edges)
    [G_final, final_edges, benigns, trolls] = breakGraph(G, edges, centrality)

    troll_neighbors = find_troll_neighbors(G_final, final_edges, benigns, trolls)