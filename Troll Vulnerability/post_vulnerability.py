import csv
import re
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from sklearn import preprocessing
from sklearn import svm
from sklearn import tree
from sklearn.model_selection import train_test_split

def preprocess_data(data):
    votes = dict()
    for i in range(0, len(data)):
        final = re.findall('\[.*?\]', data[i]['comments'])
        pos = []
        neg = []
        for sentence in final:
            for number in sentence:
                try:
                    pos.append(int(number))
                except:
                    if number == "-":
                        neg.append(-1)
                    else:
                        continue

        votes[i] = {'pos': pos, 'neg': neg}

    return votes


def liwc(data):
    analyzer = SentimentIntensityAnalyzer()
    scores = dict()
    for i in range(0, len(data)):
        sentence = data[i]['text']
        scores[i] = analyzer.polarity_scores(sentence)

    return scores


def label_data(votes):
    label = []
    for i in range(0, len(votes)):
        if len(votes[i]['neg']) != 0:
            label.append(1)
        else:
            label.append(0)

    return label


def encode_tags(data):
    le = preprocessing.LabelEncoder()

    tags = dict([])
    for i in range(0, len(data)):
        tag = data[i]['tags']
        quoted = re.compile("'[^']*'")
        for value in quoted.findall(tag):
            if i in tags.keys():
                tags[i].append(value[1:-1])
            else:
                tags[i] = ([value[1:-1]])

    unique_tags = []
    encoding = {}
    encode_counter = 0
    for i in range(0, len(data)):
        try:
            for tag in tags[i]:
                if tag in unique_tags:
                    continue
                else:
                    unique_tags.append(tag)
                    encoding[tag] = encode_counter
                    encode_counter = encode_counter + 1
        except:
            continue

    return encoding, tags


if __name__ == '__main__':
    with open('1500posts.csv') as f:
        reader = csv.reader(f, skipinitialspace=True)
        header = next(reader)
        data = [dict(zip(header, row)) for row in reader]

    for i in range(0, len(data)):
        if not data[i]['num_of_comments'] == "num_of_comments":
            data[i]['num_of_comments'] = int(data[i]['num_of_comments'])

        if not data[i]['word_counter'] == "word_counter":
            data[i]['word_counter'] = int(data[i]['word_counter'])

    votes = preprocess_data(data)

    liwc_features = liwc(data)

    labels = label_data(votes)

    tags_encoder, tags = encode_tags(data)

    dataset = []
    label = []
    for i in range(0, len(data)):
        tag_vector = [0] * len(tags_encoder)
        try:
            for tag in tags[i]:
                index = tags_encoder[tag]
                tag_vector[index] = 1

            dataset.append([data[i]['word_counter'], data[i]['num_of_comments'], liwc_features[i]['compound'], liwc_features[i]['neu'],
                            liwc_features[i]['pos'], liwc_features[i]['neg']])
            label.append(labels[i])
        except:
            continue

    X_train, X_test, y_train, y_test = train_test_split(dataset, label, test_size = 0.3, random_state = 0)

    clf = tree.DecisionTreeClassifier()
    clf = clf.fit(X_train, y_train)

    clf_svm = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)

    print("Accuracy of Decision Tree classifier: ")
    print(clf.score(X_test, y_test))
    print("Accuracy of SVM classifier: ")
    print(clf_svm.score(X_test,y_test))
